package demo;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.github.ontio.OntSdk;
import com.github.ontio.account.Account;

import com.github.ontio.common.Address;
import com.github.ontio.common.Helper;
import com.github.ontio.core.transaction.Transaction;
import com.github.ontio.crypto.SignatureScheme;
import com.github.ontio.network.exception.ConnectorException;
import com.github.ontio.sdk.exception.SDKException;
import com.github.ontio.sdk.wallet.Identity;
import com.github.ontio.smartcontract.neovm.abi.AbiFunction;
import com.github.ontio.smartcontract.neovm.abi.AbiInfo;
import com.github.ontio.smartcontract.neovm.abi.BuildParams;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

public class MyGame {



    public static OntSdk sdk = OntSdk.getInstance();
    public static String testRpc = "http://polaris1.ont.io:20336";
    public static String localRpc = "http://127.0.0.1:20336";
    public static String zhuwangRpc = "http://dappnode1.ont.io:20336";
    public static String contractAddr = "95adaa30262e21cefe07bb99624d6249ce0b170d";
    public static String password = "LUlu@665211";

    public static Account account;
    public static Account account1;
    public static Account account2;
    public static Account account3;
    public static Account account4;
    public static Account account5;
    public static Account account6;
    public static Account account7;
    public static Account adminAccount;
    public static Account accountN;

    public static Account moneyAccount;



    public static AbiInfo abiInfo;

    public static void main(String[] args) throws Exception {

        String abi = "{\"functions\":[{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"\"},{\"name\":\"args\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"init\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"setParameters\",\"parameters\":[{\"name\":\"keyHolderPercen\",\"type\":\"Integer\"},{\"name\":\"bonusPercen\",\"type\":\"Integer\"},{\"name\":\"shareHolderPercen\",\"type\":\"Integer\"},{\"name\":\"invitorPercen\",\"type\":\"Integer\"}],\"returntype\":\"\"}," +
                "{\"name\":\"setDistributeParameters\",\"parameters\":[{\"name\":\"lastBuyerPercen\",\"type\":\"\"},{\"name\":\"nextBonusPercen\",\"type\":\"\"},{\"name\":\"operationPercen\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"startNewRound\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"endCurrentRound\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"withdrawOperation\",\"parameters\":[{\"name\":\"account\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"withdrawAdmin\",\"parameters\":[{\"name\":\"account\",\"type\":\"ByteArray\"}, {\"name\":\"ongAmount\",\"type\":\"Integer\"}],\"returntype\":\"\"}," +
                "{\"name\":\"withdrawShareHolder\",\"parameters\":[{\"name\":\"account\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"withdrawFee\",\"parameters\":[{\"name\":\"account\",\"type\":\"ByteArray\"}],\"returntype\":\"\"}," +
                "{\"name\":\"buyKey\",\"parameters\":[{\"name\":\"account\",\"type\":\"ByteArray\"},{\"name\":\"invitor\",\"type\":\"ByteArray\"}],\"returntype\":\"\"}," +
                "{\"name\":\"invitorPlayer\",\"parameters\":[{\"name\":\"account\",\"type\":\"\"},{\"name\":\"newaccount\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"withdrawDividend\",\"parameters\":[{\"name\":\"account\",\"type\":\"ByteArray\"}],\"returntype\":\"\"}," +
                "{\"name\":\"updateDividendBalance\",\"parameters\":[{\"name\":\"account\",\"type\":\"\"},{\"name\":\"currentRound\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getBuyerDistribute\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getFeeBalance\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getShareHolderBalance\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getOperationBalance\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getBonusDistributePercen\",\"parameters\":[{\"name\":\"\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getLastBuyer\",\"parameters\":[{\"name\":\"currentRound\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getBonusBalance\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getKeyBalance\",\"parameters\":[{\"name\":\"account\",\"type\":\"\"},{\"name\":\"currentRound\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getDividendBalance\",\"parameters\":[{\"name\":\"account\",\"type\":\"ByteArray\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getInvitor\",\"parameters\":[{\"name\":\"account\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getCurrentRound\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getCurrentRemainingTime\",\"parameters\":[{\"name\":\"roundNumber\",\"type\":\"Integer\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getRoundGameStatus\",\"parameters\":[{\"name\":\"roundNumber\",\"type\":\"Integer\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getKeyPrice\",\"parameters\":[],\"returntype\":\"\"}," +
                "{\"name\":\"getToTalKey\",\"parameters\":[{\"name\":\"roundNumber\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"getProfitPerKey\",\"parameters\":[{\"name\":\"roundNumber\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"concatKey\",\"parameters\":[{\"name\":\"str1\",\"type\":\"\"},{\"name\":\"str2\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"_transferONG\",\"parameters\":[{\"name\":\"fromAcct\",\"type\":\"\"},{\"name\":\"toAcct\",\"type\":\"\"},{\"name\":\"amount\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"_transferONGFromContact\",\"parameters\":[{\"name\":\"toAcct\",\"type\":\"\"},{\"name\":\"amount\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"Revert\",\"parameters\":[{\"name\":\"\",\"type\":\"\"}],\"returntype\":\"\"}," +
                "{\"name\":\"Require\",\"parameters\":[{\"name\":\"condition\",\"type\":\"\"}],\"returntype\":\"\"},{\"name\":\"RequireScriptHash\",\"parameters\":[{\"name\":\"key\",\"type\":\"\"}],\"returntype\":\"\"},{\"name\":\"RequireWitness\",\"parameters\":[{\"name\":\"witness\",\"type\":\"\"}],\"returntype\":\"\"},{\"name\":\"Add\",\"parameters\":[{\"name\":\"a\",\"type\":\"\"},{\"name\":\"b\",\"type\":\"\"}],\"returntype\":\"\"},{\"name\":\"Sub\",\"parameters\":[{\"name\":\"a\",\"type\":\"\"},{\"name\":\"b\",\"type\":\"\"}],\"returntype\":\"\"},{\"name\":\"Mul\",\"parameters\":[{\"name\":\"a\",\"type\":\"\"},{\"name\":\"b\",\"type\":\"\"}],\"returntype\":\"\"},{\"name\":\"Div\",\"parameters\":[{\"name\":\"a\",\"type\":\"\"},{\"name\":\"b\",\"type\":\"\"}],\"returntype\":\"\"}]}";


        sdk.setRpc(zhuwangRpc);
        sdk.openWalletFile("cynowallet.dat");
        abiInfo = JSON.parseObject(abi, AbiInfo.class);
        String privateKey = Account.getGcmDecodedPrivateKey("ya+Hu00xI2DDeq9UxKco0GCqM02qJLzTNy/sD9G+ysFBjkoIsomNsu4245y5Pi+G",
                "111111", "AeJGmTDUdSzMdrSHU2pa8rLMo23AAs53LM", Base64.getDecoder().decode("lqOwJxgSRoovcfonWw5emQ=="),
                16384, SignatureScheme.SHA256WITHECDSA);
        account = new Account(Helper.hexToBytes(privateKey), SignatureScheme.SHA256WITHECDSA);
        adminAccount = sdk.getWalletMgr().getAccount("AbPRaepcpBAFHz9zCj4619qch4Aq5hJARA","LUlu@665211");

        String moneyAdminPrivate = Account.getGcmDecodedPrivateKey("h+vi+SA9ZGZb9GFZfwXbTnzctBCigKAI5kWkQvQdNGvwub1e2VTxF9WsCo2zhLcF",
                "LUlu@665211", "AYsaNHgtv9CWYsmhiRVcEhPQUk5nbgQ3Y3", Base64.getDecoder().decode("CQZQkcfX8JtJICHrGtrSug=="),
                16384, SignatureScheme.SHA256WITHECDSA);

        moneyAccount = new Account(Helper.hexToBytes(moneyAdminPrivate), SignatureScheme.SHA256WITHECDSA);


        account1 = getAccount("wR9S/JYwMDfCPWFGEy5DEvWfU14k9suZuL4+woGtfhZJf5+KyL9VJqMi/wGTOd1i","passwordtest","AZqk4i7Zhfhc1CRUtZYKrLw4YTSq4Y9khN","ZaIL8DxNaQ91fkMHAdiBjQ==");
        account2 = getAccount("PCj/a4zUgYnOBNZUVEaXBK61Sq4due8w2RUzrumO3Bm0hZ/3v4mlDiXYYvmmBZUk","passwordtest","ARpjnrnHEjXhg4aw7vY6xsY6CfQ1XEWzWC","wlz1h439j0GwsWhGBByMxg==");
        account3 = getAccount("4U6qYhRUxGYTcvDvBKKCu2C1xUyd0A+pHXsK1YVY1Hbxd8TcbyvmfOcqx7N+f+BH","passwordtest","AQs2BmzzFVk7pQPfTQQi9CTEz43ejSyBnt","AFDFoZAlLGJdB4yVQqYVhw==");
        account4 = getAccount("i6n+FTACzRF5y0oeo6Wm3Zbv68bfjmyRyNfKB5IArK76RCG8b/JgRqnHgMtHixFx","passwordtest","AKBSRLbFNvUrWEGtKxNTpe2ZdkepQjYKfM","FkTZ6czRPAqHnSpEqVEWwA==");
        account5 = getAccount("IoEbJXMPlxNLrAsDYKGD4I6oFYgJl1j603c8oHQl+82yET+ibKgJdZjgdw39pr2K","passwordtest","AduX7odaWGipkdvzBwyaTgsumRbRzhhiwe","lc7ofKCBkNUmjTLrZYmStA==");
        account6 = getAccount("6hynBJVTAhmMJt9bIYSDoz+GL5EFaUGhn3Pd6HsF+RQ1tFyZoFRhT+JNMGAb+B6a","passwordtest","ANFfWhk3A5iFXQrVBHKrerjDDapYmLo5Bi","DTmbW9wzGA8pi4Dcj3/Cpg==");
        account7 = getAccount("EyXxszzKh09jszQXMIFJTmbujnojOzYzPU4cC0wOpuegDgVcRFllATQ81zD0Rp8s","passwordtest","AK3YRcRvKrASQ6nTfW48Z4iMZ2sDTDRiMC","jbwUF7JxgsiJq5QAy5dfug==");


        boolean getCurrentRound2 = false;
        boolean deploy = false;
        boolean init = false;
        boolean startNewRound = false;
        boolean getCurrentRound = false;
        boolean getRoundGameStatus = false;
        boolean getBonusBalance = false;
        boolean getKeyPrice = false;
        boolean getDividendBalance = false;
        boolean getShareHolderBalance = false;
        boolean setParameters = false;
        boolean getFeeBalance = false;
        boolean buyKey = false;
        boolean withdrawDividend = false;
        boolean endCurrentRound = false;
        boolean getCurrentRemainingTime = false;
        boolean getOperationBalance = false;
        boolean withdrawFee = false;
        boolean withdrawAdmin = false;
        accountN = account1;
//        account = adminAccount;

        if(false) {
            System.out.println(sdk.nativevm().ont().queryBalanceOf(account.getAddressU160().toBase58()));
            String txhash = sdk.nativevm().ont().sendTransfer(account,adminAccount.getAddressU160().toBase58(),100000,account,20000,0);
            Thread.sleep(6000);
            System.out.println(sdk.getConnect().getSmartCodeEvent(txhash));
            System.out.println(sdk.nativevm().ong().unboundOng(account.getAddressU160().toBase58()));
            return;
        }

        if(false) {
            sdk.nativevm().ong().withdrawOng(account,account.getAddressU160().toBase58(),81742315000000000L,account,20000,0);
            return;
        }

        if(false) {
            sdk.nativevm().ong().sendTransfer(account,account1.getAddressU160().toBase58(),10000000000L,account,20000,500);
            sdk.nativevm().ong().sendTransfer(account,account2.getAddressU160().toBase58(),10000000000L,account,20000,500);
            sdk.nativevm().ong().sendTransfer(account,account3.getAddressU160().toBase58(),10000000000L,account,20000,500);
            sdk.nativevm().ong().sendTransfer(account,account4.getAddressU160().toBase58(),10000000000L,account,20000,500);
            sdk.nativevm().ong().sendTransfer(account,account5.getAddressU160().toBase58(),10000000000L,account,20000,500);
            sdk.nativevm().ong().sendTransfer(account,account6.getAddressU160().toBase58(),10000000000L,account,20000,500);
            return;
        }

        if(deploy) {
            String codeStr = "";
            Transaction tx = sdk.vm().makeDeployCodeTransaction(codeStr, true,"1","1","sss","1","1",adminAccount.getAddressU160().toBase58(), 22600000,0);
            sdk.signTx(tx, new Account[][]{{adminAccount}});
            Object res = sdk.getConnect().syncSendRawTransaction(Helper.toHexString(tx.toArray()));
            System.out.println("res:" + res);
            return;
        }
        if(init){
            AbiFunction func = abiInfo.getFunction("init");
            String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,false);
            Thread.sleep(6000);
            Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
            System.out.println(obj);

        }
        if(getCurrentRound2){
            getCurrentRound2();
        }

        if(withdrawFee){
            withdrawFee();
        }
        if(getFeeBalance){
            getFeeBalance();
        }

        if(startNewRound){
            startNewRound();
        }
        if(withdrawDividend){
            withdrawDividend();
        }

        if(getCurrentRound){
            getCurrentRound();
        }
        if(getRoundGameStatus){
            getRoundGameStatus();
        }
        if(getBonusBalance){
            getBonusBalance();
        }
        if(getKeyPrice) {
            getKeyPrice();
        }

        if(buyKey){
            buyKey();
        }

        if(getDividendBalance) {
            getDividendBalance();
        }
        if(getShareHolderBalance) {
            getShareHolderBalance();
        }
        if(setParameters){
            setParameters();
        }
        if (endCurrentRound){
            endCurrentRound();
        }
        if(getCurrentRemainingTime){
            getCurrentRemainingTime();
        }
        if (getOperationBalance){
            getOperationBalance();
        }
    }

    public static void withdrawFee() throws Exception {
        getFeeBalance();
        AbiFunction func = abiInfo.getFunction("withdrawFee");
        func.setParamsValue(adminAccount.getAddressU160().toArray());
        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,false);
        Thread.sleep(6000);
        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        System.out.println(obj);
        getFeeBalance();
    }

    public static void withdrawAdmin() throws Exception {
        getFeeBalance();
        AbiFunction func = abiInfo.getFunction("withdrawAdmin");
        func.setParamsValue(moneyAccount.getAddressU160().toArray(), 100L);
        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),moneyAccount,moneyAccount,2000000,500,func,false);
        Thread.sleep(6000);
        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        System.out.println(obj);
        getFeeBalance();
    }

    public static void getCurrentRound2() throws SDKException, ConnectorException, IOException {
        List paramList = new ArrayList();
        paramList.add("getCurrentRound".getBytes());
        List temp = new ArrayList();
        paramList.add(temp);
        byte[] args = BuildParams.createCodeParamsScript(paramList);
        Transaction tx = sdk.vm().makeInvokeCodeTransaction(Helper.reverse(contractAddr), (String)null, args, (String)null, 0L, 0L);

        Object obj = sdk.getConnect().sendRawTransactionPreExec(tx.toHexString());
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16));
    }

    public static void getOperationBalance() throws Exception {
        AbiFunction func = abiInfo.getFunction("getOperationBalance");
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(obj);
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16).doubleValue()/1000000000);
    }

    public static void startNewRound() throws Exception {
        AbiFunction func = abiInfo.getFunction("startNewRound");
        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,500,func,false);
        Thread.sleep(6000);
        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        System.out.println(obj);
        return;
    }
    public static void withdrawDividend() throws Exception {
        System.out.println(sdk.nativevm().ong().queryBalanceOf(accountN.getAddressU160().toBase58()));
        getDividendBalance();
        AbiFunction func = abiInfo.getFunction("withdrawDividend");
        func.setParamsValue(accountN.getAddressU160().toArray());
        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),accountN,accountN,2000000,0,func,false);
        Thread.sleep(6000);
        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        System.out.println(obj);
        getDividendBalance();
        System.out.println(sdk.nativevm().ong().queryBalanceOf(accountN.getAddressU160().toBase58()));
    }
    public static void getCurrentRound() throws Exception {
        AbiFunction func = abiInfo.getFunction("getCurrentRound");
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(obj);
        return;
    }
    public static void getRoundGameStatus() throws Exception {
        AbiFunction func = abiInfo.getFunction("getRoundGameStatus");
        func.setParamsValue(1L);
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(new String(Helper.hexToBytes(((JSONObject)obj).getString("Result"))));
    }
    public static void getBonusBalance() throws Exception {
        AbiFunction func = abiInfo.getFunction("getBonusBalance");
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(obj);
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16).doubleValue()/1000000000);
    }
    public static void getKeyPrice() throws Exception {
        AbiFunction func = abiInfo.getFunction("getKeyPrice");
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16).doubleValue()/1000000000.0000);
    }
    public static void buyKey() throws Exception {
        AbiFunction func = abiInfo.getFunction("buyKey");
        func.setParamsValue(accountN.getAddressU160().toArray(), accountN.getAddressU160().toArray());
//        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),accountN,accountN,20000000,500,func,false);

//        System.out.println(txhash);
//        Thread.sleep(6000);
//        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        Object obj =  sdk.neovm().sendTransaction(Helper.reverse(contractAddr),accountN,accountN,20000000,500,func,true);
        System.out.println(obj);
    }
    public static void endCurrentRound() throws Exception {
        AbiFunction func = abiInfo.getFunction("endCurrentRound");
        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,500,func,false);
        Thread.sleep(6000);
        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        System.out.println(obj);
    }
    public static void getDividendBalance() throws Exception {
        AbiFunction func = abiInfo.getFunction("getDividendBalance");
//        func.setParamsValue(accountN.getAddressU160().toArray(),1L);
        func.setParamsValue(Address.decodeBase58("AMAqR8Y8JWngDk5QsoGpa7vPhu5Tu5KKeS").toArray());
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16)/1000000000.0000);
    }

    public static void getCurrentRemainingTime() throws Exception {
        AbiFunction func = abiInfo.getFunction("getCurrentRemainingTime");
        func.setParamsValue(1L);
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16));
    }
    public static void getShareHolderBalance() throws Exception {
        AbiFunction func = abiInfo.getFunction("getShareHolderBalance");
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16)/1000000000.0000);
    }
    public static void setParameters() throws Exception {
        AbiFunction func = abiInfo.getFunction("setParameters");
        func.setParamsValue();
        String txhash = (String) sdk.neovm().sendTransaction(Helper.reverse(contractAddr),account,account,2000000,0,func,false);
        Thread.sleep(6000);
        Object obj = sdk.getConnect().getSmartCodeEvent(txhash);
        System.out.println(obj);
    }

    public static void getFeeBalance() throws Exception {
        AbiFunction func = abiInfo.getFunction("getFeeBalance");
        Object obj = sdk.neovm().sendTransaction(Helper.reverse(contractAddr),adminAccount,adminAccount,2000000,0,func,true);
        if(((JSONObject)obj).getString("Result").equals("")){
            System.out.println(0);
            return;
        }
        System.out.println(Long.valueOf(Helper.reverse(((JSONObject)obj).getString("Result")), 16)/1000000000.0000);
    }


    public static Account getAccount(String enpri,String password,String address,String salt) throws Exception {
        String privateKey = Account.getGcmDecodedPrivateKey(enpri,password,address,Base64.getDecoder().decode(salt),16384,SignatureScheme.SHA256WITHECDSA);
        Account account = new Account(Helper.hexToBytes(privateKey),SignatureScheme.SHA256WITHECDSA);
//        System.out.println(Helper.toHexString(account.serializePublicKey()));
        return account;
    }
}
